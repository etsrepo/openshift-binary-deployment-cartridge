#!/bin/env oo-ruby

# args
# 1 - checksum of the artifact to distribute

require_relative '../lib/util.rb'

checksum=ARGV.shift

sync_base_dir = "#{ENV['OPENSHIFT_DATA_DIR']}/artifacts"

raise "Release #{checksum} has not been prepared yet" unless File.exist?(File.join(sync_base_dir, checksum))

say "Validating artifact checksum on head gear"
`#{ENV['OPENSHIFT_BINARYDEPLOY_DIR']}/usr/child/bin/validate #{checksum}`
raise "Checksum validation failed on head gear" unless $?.success?

successes = []
failures = []

gears = read_gear_registry
say "# of child gears = #{gears.count - 1}"

output = parallel(gears) do |gear|
  result = []

  unless gear.local
    result << "Distributing to #{gear.url}"

    result << "Syncing artifact #{checksum}"
    result << `rsync -v --delete-after -az --rsh=ssh "#{sync_base_dir}/#{checksum}/" "#{gear.url}:app-root/data/artifacts/#{checksum}/"`

    result << "Validating checksum"
    gear.run "$OPENSHIFT_BINARYDEPLOY_DIR/usr/child/bin/validate #{checksum}"

    if $?.success?
      result << "Checksum validated"
      successes << gear.id
    else
      result << "Checksum validation failed"
      failures << gear.id
    end
  end

  result
end

output.each_with_index do |out, index|
  next if gears[index].local
  uuid = gears[index].id
  say "Result from gear #{uuid}"
  output[index].each {|o| say "  #{o}"}
  say ""
end

say "\nSuccessful distributions: #{successes.count}"
successes.each { |uuid| say uuid }

say ""

say "Failed distributions: #{failures.count}"
failures.each { |uuid| say uuid }
