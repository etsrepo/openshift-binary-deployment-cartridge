#!/bin/env oo-ruby

# args
# 1 - checksum of the artifact to distribute

require_relative 'lib/util.rb'

checksum=ARGV.shift

sync_base_dir = "#{ENV['OPENSHIFT_DATA_DIR']}/artifacts"

raise "Release #{checksum} has not been prepared yet" unless File.exist?(File.join(sync_base_dir, checksum))

puts "Validating artifact checksum on head gear"
`#{ENV['OPENSHIFT_BINARYDEPLOY_DIR']}/child/bin/validate #{checksum}`
raise "Checksum validation failed on head gear" unless $?.success?

successes = []
failures = []

gears = read_gear_registry
puts "# of child gears = #{gears.count}"

output = Parallel.map(gears, :in_threads => 5) do |ssh_url|
  result = []
  uuid, host = ssh_url.split('@')
  result << "Distributing to #{uuid}@#{host}"

  result << "Creating artifact directory for #{checksum}"
  `ssh #{uuid}@#{host} mkdir -p app-root/runtime/artifacts/#{checksum}`

  result << "Syncing artifact #{checksum}"
  result << `rsync -v --delete-after -az --rsh=ssh "#{sync_base_dir}/#{checksum}/" "#{uuid}@#{host}:app-root/runtime/artifacts/#{checksum}/"`

  result << "Validating checksum"
  `ssh #{uuid}@#{host} app-root/runtime/scripts/validate #{checksum}`

  if $?.success?
    result << "Checksum validated"
    successes << uuid
  else
    result << "Checksum validation failed"
    failures << uuid
  end

  result
end

output.each_with_index do |out, index|
  uuid = gears[index][0]
  puts "Result from gear #{uuid}"
  out.each { |o| puts "  #{o}" }
  puts ""
end

puts "\nSuccessful distributions: #{successes.count}"
successes.each { |uuid| puts uuid }

puts ""

puts "Failed distributions: #{failures.count}"
failures.each { |uuid| puts uuid }
